{"version":3,"file":"static/js/919.4b94448c.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","workers/jscad.worker.ts"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","/// <reference lib=\"webworker\" />\n\n/* eslint-env worker */\n/* global self */\n\nimport {\n  JscadWorkerRequest,\n  JscadWorkerResponse,\n  ResultsLike,\n} from './jscad.worker.types';\n\nconsole.log('<-> JSCAD worker module starting...');\n\ntype ConvertOptions = {\n  source: string;\n  format?: string;\n  parameters?: Record<string, unknown>;\n  options?: Record<string, unknown>;\n};\n\ntype ConvertResult = {\n  data: unknown[];\n  mimeType: string;\n};\n\ntype ConvertFunction = (options: ConvertOptions) => ConvertResult;\n\ntype ArrayBufferViewLike = {\n  buffer: ArrayBuffer;\n  byteOffset: number;\n  byteLength: number;\n};\n\ninterface JscadConvertModule {\n  convert: ConvertFunction;\n}\n\ninterface JscadWorkerGlobal extends DedicatedWorkerGlobalScope {\n  JscadConvert?: JscadConvertModule;\n}\n\nconst workerScope = self as unknown as JscadWorkerGlobal;\n\nlet convertFn: ConvertFunction | null = null;\nlet initializationError: Error | null = null;\nconst utf8Decoder =\n  typeof TextDecoder === 'undefined' ? null : new TextDecoder();\n\nfunction getBasePath() {\n  // Use PUBLIC_URL if available\n  if (typeof process !== 'undefined' && process.env.PUBLIC_URL) {\n    return process.env.PUBLIC_URL;\n  }\n  // Extract base path from worker location\n  if (typeof self !== 'undefined' && (self as any).location) {\n    const { origin, pathname } = (self as any).location;\n    // Remove \"/static/...\" if present\n    const staticIndex = pathname.indexOf('/static/');\n    const base =\n      staticIndex > 0 ? pathname.substring(0, staticIndex) : pathname.replace(/\\/$/, '');\n    return `${origin}${base}`;\n  }\n  return '';\n}\n\nconst basePath = getBasePath();\nconst openjscadPath = `${basePath}/dependencies/openjscad.js`;\n\ntry {\n  importScripts(openjscadPath);\n  const module = workerScope.JscadConvert;\n  if (!module || typeof module.convert !== 'function') {\n    throw new Error('openjscad.js did not expose a convert function.');\n  }\n  convertFn = module.convert;\n  console.log('<-> OpenJSCAD convert API loaded in worker');\n} catch (error) {\n  initializationError =\n    error instanceof Error ? error : new Error(String(error));\n  console.error(\n    '>>> Failed to load OpenJSCAD convert API:',\n    initializationError\n  );\n}\n\n/**\n * Error handler for uncaught errors in the worker.\n */\nself.onerror = (error) => {\n  console.error('>>> Uncaught error in JSCAD worker:', error);\n  const errorMessage =\n    error instanceof ErrorEvent ? error.message : String(error);\n  self.postMessage({\n    type: 'error',\n    error: `JSCAD worker error: ${errorMessage}`,\n  });\n  return true; // Prevent default error handling\n};\n\n/**\n * Main worker message handler.\n */\nself.onmessage = async (event: MessageEvent<JscadWorkerRequest>) => {\n  const { type, results, configVersion } = event.data || {};\n\n  if (initializationError) {\n    const response: JscadWorkerResponse = {\n      type: 'error',\n      error: `JSCAD library initialization failed: ${initializationError.message}`,\n      configVersion,\n    };\n    self.postMessage(response);\n    return;\n  }\n\n  if (!convertFn) {\n    const response: JscadWorkerResponse = {\n      type: 'error',\n      error: 'JSCAD convert function is unavailable.',\n      configVersion,\n    };\n    self.postMessage(response);\n    return;\n  }\n\n  if (type !== 'batch_jscad_to_stl') {\n    const response: JscadWorkerResponse = {\n      type: 'error',\n      error: `Unknown message type: ${type}`,\n      configVersion,\n    };\n    self.postMessage(response);\n    return;\n  }\n\n  try {\n    const originalResults: ResultsLike | undefined = results;\n    if (!originalResults || !originalResults.cases) {\n      throw new Error('No results or cases provided to process.');\n    }\n\n    // Clone shallowly to avoid mutating caller's object directly\n    const updatedResults: ResultsLike = { ...originalResults };\n    updatedResults.cases = { ...originalResults.cases };\n\n    const entries = Object.entries(updatedResults.cases);\n    if (entries.length === 0) {\n      throw new Error('No JSCAD cases to process.');\n    }\n\n    // Process each case sequentially\n    for (const [name, caseObj] of entries) {\n      const jscad = caseObj?.jscad as string | undefined;\n      if (!jscad || jscad.trim() === '') {\n        // Keep existing entry as-is\n        continue;\n      }\n\n      try {\n        // Convert JSCAD to STL\n        const result = convertFn({ source: jscad, format: 'stla' });\n\n        const firstPart = result?.data?.[0];\n        let stlContent: string | null = null;\n\n        if (typeof firstPart === 'string') {\n          stlContent = firstPart;\n        } else if (firstPart instanceof ArrayBuffer && utf8Decoder) {\n          stlContent = utf8Decoder.decode(new Uint8Array(firstPart));\n        } else if (ArrayBuffer.isView(firstPart) && utf8Decoder) {\n          const view = firstPart as ArrayBufferViewLike;\n          const array = new Uint8Array(\n            view.buffer,\n            view.byteOffset,\n            view.byteLength\n          );\n          stlContent = utf8Decoder.decode(array);\n        }\n\n        if (!stlContent) {\n          console.warn(\n            `Generated STL content is empty or unsupported type for case: ${name}`\n          );\n          continue;\n        }\n\n        // Rename default STL header from \"solid csg.js\" to the specific case name for clarity\n        stlContent = stlContent.replace(/^solid csg\\.js\\b/, `solid ${name}`);\n\n        if (!stlContent || stlContent.trim() === '') {\n          console.warn(`Generated STL content is empty for case: ${name}`);\n          continue;\n        }\n\n        updatedResults.cases[name] = {\n          ...(updatedResults.cases[name] as any),\n          stl: stlContent,\n        };\n      } catch (caseError: unknown) {\n        const errorMessage =\n          caseError instanceof Error ? caseError.message : String(caseError);\n        console.error(`Failed to convert case ${name}: ${errorMessage}`);\n        // Continue with other cases even if one fails\n      }\n    }\n\n    const response: JscadWorkerResponse = {\n      type: 'success',\n      results: updatedResults,\n      configVersion,\n    };\n    self.postMessage(response);\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const response: JscadWorkerResponse = {\n      type: 'error',\n      error: `JSCAD to STL batch conversion failed: ${errorMessage}`,\n      configVersion,\n    };\n    self.postMessage(response);\n  }\n};\n\n// Export empty object to satisfy TypeScript's module requirement\nexport { };\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPropertyKey","t","i","r","e","toPrimitive","call","TypeError","String","Number","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","console","log","workerScope","self","convertFn","initializationError","utf8Decoder","TextDecoder","basePath","location","origin","pathname","staticIndex","indexOf","base","substring","replace","concat","getBasePath","openjscadPath","importScripts","module","JscadConvert","convert","Error","error","onerror","errorMessage","ErrorEvent","message","postMessage","type","onmessage","async","results","configVersion","event","data","response","originalResults","cases","updatedResults","_objectSpread","entries","name","caseObj","jscad","trim","_result$data","result","source","format","firstPart","stlContent","ArrayBuffer","decode","Uint8Array","isView","view","array","buffer","byteOffset","byteLength","warn","stl","caseError"],"sourceRoot":""}