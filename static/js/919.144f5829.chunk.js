(()=>{"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t){var r=function(t,r){if("object"!=e(t)||!t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var n=o.call(t,r||"default");if("object"!=e(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==e(r)?r:r+""}function r(e,r,o){return(r=t(r))in e?Object.defineProperty(e,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[r]=o,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,o)}return r}function n(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach(function(t){r(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}console.log("<-> JSCAD worker module starting..."),self.onerror=e=>{console.error(">>> Uncaught error in JSCAD worker:",e);const t=e instanceof ErrorEvent?e.message:String(e);return self.postMessage({type:"error",error:"JSCAD worker error: ".concat(t)}),!0};const s={};self.document={getElementById:e=>({style:{},firstChild:{textContent:""},className:"",text:"",value:0,min:0,max:0,options:{length:0,remove:()=>{},add:()=>{}},appendChild:()=>{},setAttribute:()=>{}}),createElement:e=>({style:{},firstChild:{textContent:""},className:"",text:"",value:0,min:0,max:0,options:{length:0,remove:()=>{},add:()=>{}},appendChild:()=>{},setAttribute:()=>{}}),implementation:{},location:{href:""},addEventListener:(e,t)=>{(s[e]||(s[e]=[])).push(t)},dispatchEvent:e=>{const t="string"===typeof e?e:null===e||void 0===e?void 0:e.type;(s[t]||[]).forEach(t=>{try{t(e)}catch(r){}})}},self.window=self;let i=null,c=null;const a=(async()=>{try{var e,t;importScripts("/dependencies/openjscad.js"),await new Promise(e=>setTimeout(e,0)),null===(e=(t=self.document).dispatchEvent)||void 0===e||e.call(t,"DOMContentLoaded");const r=5;let o=0;for(;o<r;){const e=window.myjscad;if(!!e&&"function"===typeof e.setup&&"function"===typeof e.compile&&"function"===typeof e.generateOutput){i=e;break}o+=1,await new Promise(e=>setTimeout(e,10))}if(!i){const e=Object.keys(window.myjscad||{});throw console.error("JSCAD init: myjscad not ready after attempts; keys =",e),new Error("window.myjscad was not correctly populated by openjscad.js script.")}console.log("<-> OpenJSCAD library loaded and initialized in worker")}catch(r){c=r instanceof Error?r:new Error(String(r)),console.error(">>> Failed to load or initialize OpenJSCAD library:",c)}})();self.onmessage=async e=>{await a;const{type:t,results:r,configVersion:o}=e.data||{};if(c){const e={type:"error",error:"JSCAD library initialization failed: ".concat(c),configVersion:o};return void self.postMessage(e)}if(!i)throw new Error("JSCAD library is not loaded or initialized correctly.");if("batch_jscad_to_stl"!==t){const e={type:"error",error:"Unknown message type: ".concat(t),configVersion:o};return void self.postMessage(e)}try{const e=r;if(!e||!e.cases)throw new Error("No results or cases provided to process.");const t=n({},e);t.cases=n({},e.cases);const c=Object.entries(t.cases);if(0===c.length)throw new Error("No JSCAD cases to process.");for(const[r,o]of c){const e=null===o||void 0===o?void 0:o.jscad;if(e&&""!==e.trim())try{i.setup(),await i.compile(e);let o=i.generateOutput("stla",null).asBuffer().toString();if(o=o.replace(/^solid csg\.js\b/,"solid ".concat(r)),!o||""===o.trim()){console.warn("Generated STL content is empty for case: ".concat(r));continue}t.cases[r]=n(n({},t.cases[r]),{},{stl:o})}catch(s){const e=s instanceof Error?s.message:String(s);console.error("Failed to convert case ".concat(r,": ").concat(e))}}const a={type:"success",results:t,configVersion:o};self.postMessage(a)}catch(l){const e=l instanceof Error?l.message:String(l),t={type:"error",error:"JSCAD to STL batch conversion failed: ".concat(e),configVersion:o};self.postMessage(t)}}})();
//# sourceMappingURL=919.144f5829.chunk.js.map