{"version":3,"file":"static/js/919.144f5829.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","workers/jscad.worker.ts"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","/* eslint-env worker */\n/* global self */\n\nimport {\n  JscadWorkerRequest,\n  JscadWorkerResponse,\n  ResultsLike,\n} from './jscad.worker.types';\n\nconsole.log('<-> JSCAD worker module starting...');\n\n/**\n * Error handler for uncaught errors in the worker.\n */\nself.onerror = (error) => {\n  console.error('>>> Uncaught error in JSCAD worker:', error);\n  const errorMessage =\n    error instanceof ErrorEvent ? error.message : String(error);\n  self.postMessage({\n    type: 'error',\n    error: `JSCAD worker error: ${errorMessage}`,\n  });\n  return true; // Prevent default error handling\n};\n\n// Create minimal mock of document object for openjscad.js\n// The library expects DOM APIs; we provide minimal shims and a simple event system\nconst docListeners: Record<string, Array<(ev?: any) => void>> = {};\nconst makeStubElement = () => {\n  const options: any = {\n    length: 0,\n    remove: () => {},\n    add: () => {},\n  };\n  return {\n    style: {},\n    firstChild: { textContent: '' },\n    className: '',\n    text: '',\n    value: 0,\n    min: 0,\n    max: 0,\n    options,\n    appendChild: () => {},\n    setAttribute: () => {},\n  } as any;\n};\n(self as any).document = {\n  getElementById: (_id?: string) => makeStubElement(),\n  createElement: (_tag?: string) => makeStubElement(),\n  implementation: {},\n  location: { href: '' },\n  addEventListener: (type: string, listener: (ev?: any) => void) => {\n    (docListeners[type] ||= []).push(listener);\n  },\n  dispatchEvent: (evt: any) => {\n    const type = typeof evt === 'string' ? evt : evt?.type;\n    (docListeners[type] || []).forEach((fn) => {\n      try {\n        fn(evt);\n      } catch (_e) {\n        /* noop */\n      }\n    });\n  },\n};\n\n// Global interface for the myjscad library loaded from openjscad.js\ninterface MyJscad {\n  setup: () => void;\n  compile: (code: string) => Promise<string>;\n  generateOutput: (\n    format: string,\n    geometry: unknown\n  ) => {\n    asBuffer: () => {\n      toString: () => string;\n    };\n  };\n}\n\ndeclare global {\n  interface Window {\n    myjscad: ((opts: unknown) => MyJscad) | MyJscad;\n  }\n}\n\n// Create window alias for self since openjscad.js expects window.myjscad\n// In a web worker, window doesn't exist, so we alias it to self\n(self as any).window = self;\n\nlet jscadInstance: MyJscad | null = null;\nlet initializationError: Error | null = null;\n\n// Wrap initialization in a self-invoking async function to handle promises\nconst initializationPromise = (async () => {\n  try {\n    // @ts-expect-error - importScripts is available in web workers\n    importScripts('/dependencies/openjscad.js');\n\n    // The vendor bundle registers an init() on DOMContentLoaded which defines\n    // window.myjscad.setup/compile/generateOutput. In a worker there's no DOMContentLoaded,\n    // so we manually dispatch it now that the script is loaded.\n    // Give the bundle a tick to finish registering listeners, then dispatch.\n    await new Promise((r) => setTimeout(r, 0));\n    (self as any).document.dispatchEvent?.('DOMContentLoaded');\n\n    // Retry a few times in case the init runs asynchronously.\n    const maxAttempts = 5;\n    let attempt = 0;\n    while (attempt < maxAttempts) {\n      const candidate = (window as any).myjscad as Partial<MyJscad> | undefined;\n      const hasApi =\n        !!candidate &&\n        typeof candidate.setup === 'function' &&\n        typeof candidate.compile === 'function' &&\n        typeof candidate.generateOutput === 'function';\n      if (hasApi) {\n        jscadInstance = candidate as MyJscad;\n        break;\n      }\n      attempt += 1;\n      // small delay between attempts\n      await new Promise((r) => setTimeout(r, 10));\n    }\n\n    if (!jscadInstance) {\n      const currentKeys = Object.keys((window as any).myjscad || {});\n      console.error(\n        'JSCAD init: myjscad not ready after attempts; keys =',\n        currentKeys\n      );\n      throw new Error(\n        'window.myjscad was not correctly populated by openjscad.js script.'\n      );\n    }\n    console.log('<-> OpenJSCAD library loaded and initialized in worker');\n  } catch (error) {\n    // Capture initialization error and log it; onmessage will report back to caller\n    initializationError =\n      error instanceof Error ? error : new Error(String(error));\n    console.error(\n      '>>> Failed to load or initialize OpenJSCAD library:',\n      initializationError\n    );\n  }\n})();\n\n/**\n * Main worker message handler.\n */\nself.onmessage = async (event: MessageEvent<JscadWorkerRequest>) => {\n  // Wait for the initialization to complete before processing any message\n  await initializationPromise;\n\n  const { type, results, configVersion } = event.data || {};\n\n  if (initializationError) {\n    const response: JscadWorkerResponse = {\n      type: 'error',\n      error: `JSCAD library initialization failed: ${initializationError}`,\n      configVersion,\n    };\n    self.postMessage(response);\n    return;\n  }\n\n  if (!jscadInstance) {\n    throw new Error('JSCAD library is not loaded or initialized correctly.');\n  }\n\n  if (type !== 'batch_jscad_to_stl') {\n    const response: JscadWorkerResponse = {\n      type: 'error',\n      error: `Unknown message type: ${type}`,\n      configVersion,\n    };\n    self.postMessage(response);\n    return;\n  }\n\n  try {\n    const originalResults: ResultsLike | undefined = results;\n    if (!originalResults || !originalResults.cases) {\n      throw new Error('No results or cases provided to process.');\n    }\n\n    // Clone shallowly to avoid mutating caller's object directly\n    const updatedResults: ResultsLike = { ...originalResults };\n    updatedResults.cases = { ...originalResults.cases };\n\n    const entries = Object.entries(updatedResults.cases);\n    if (entries.length === 0) {\n      throw new Error('No JSCAD cases to process.');\n    }\n\n    // Process each case sequentially\n    for (const [name, caseObj] of entries) {\n      const jscad = caseObj?.jscad as string | undefined;\n      if (!jscad || jscad.trim() === '') {\n        // Keep existing entry as-is\n        continue;\n      }\n\n      try {\n        // Convert JSCAD to STL\n        jscadInstance.setup();\n        await jscadInstance.compile(jscad);\n        const output = jscadInstance.generateOutput('stla', null); // 'stla' for ASCII STL\n        let stlContent = output.asBuffer().toString();\n        // Rename default STL header from \"solid csg.js\" to the specific case name for clarity\n        stlContent = stlContent.replace(/^solid csg\\.js\\b/, `solid ${name}`);\n\n        if (!stlContent || stlContent.trim() === '') {\n          console.warn(`Generated STL content is empty for case: ${name}`);\n          continue;\n        }\n\n        updatedResults.cases[name] = {\n          ...(updatedResults.cases[name] as any),\n          stl: stlContent,\n        };\n      } catch (caseError: unknown) {\n        const errorMessage =\n          caseError instanceof Error ? caseError.message : String(caseError);\n        console.error(`Failed to convert case ${name}: ${errorMessage}`);\n        // Continue with other cases even if one fails\n      }\n    }\n\n    const response: JscadWorkerResponse = {\n      type: 'success',\n      results: updatedResults,\n      configVersion,\n    };\n    self.postMessage(response);\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const response: JscadWorkerResponse = {\n      type: 'error',\n      error: `JSCAD to STL batch conversion failed: ${errorMessage}`,\n      configVersion,\n    };\n    self.postMessage(response);\n  }\n};\n\n// Export empty object to satisfy TypeScript's module requirement\nexport {};\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPropertyKey","t","i","r","e","toPrimitive","call","TypeError","String","Number","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","console","log","self","onerror","error","errorMessage","ErrorEvent","message","postMessage","type","concat","docListeners","document","getElementById","_id","style","firstChild","textContent","className","text","min","max","options","remove","add","appendChild","setAttribute","createElement","_tag","implementation","location","href","addEventListener","listener","dispatchEvent","evt","fn","_e","window","jscadInstance","initializationError","initializationPromise","_document$dispatchEve","_document","importScripts","Promise","setTimeout","maxAttempts","attempt","candidate","myjscad","setup","compile","generateOutput","currentKeys","Error","onmessage","async","results","configVersion","event","data","response","originalResults","cases","updatedResults","_objectSpread","entries","name","caseObj","jscad","trim","stlContent","asBuffer","toString","replace","warn","stl","caseError"],"sourceRoot":""}