(()=>{"use strict";function e(r){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(r)}function r(r){var o=function(r,o){if("object"!=e(r)||!r)return r;var t=r[Symbol.toPrimitive];if(void 0!==t){var n=t.call(r,o||"default");if("object"!=e(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===o?String:Number)(r)}(r,"string");return"symbol"==e(o)?o:o+""}function o(e,o,t){return(o=r(o))in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function t(e,r){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),o.push.apply(o,t)}return o}function n(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?t(Object(n),!0).forEach(function(r){o(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}console.log("<-> JSCAD worker module starting...");const s=self;let c=null,i=null;const a="undefined"===typeof TextDecoder?null:new TextDecoder,f="undefined"!==typeof self&&self.location?self.location.origin+(self.location.pathname.replace(/\/[^/]*$/,"")||""):"",l="undefined"!==typeof process?"".concat("https://ceoloide.github.io/ergogen-gui-test","/dependencies/openjscad.js"):"".concat(f,"/dependencies/openjscad.js");try{importScripts(l);const e=s.JscadConvert;if(!e||"function"!==typeof e.convert)throw new Error("openjscad.js did not expose a convert function.");c=e.convert,console.log("<-> OpenJSCAD convert API loaded in worker")}catch(u){i=u instanceof Error?u:new Error(String(u)),console.error(">>> Failed to load OpenJSCAD convert API:",i)}self.onerror=e=>{console.error(">>> Uncaught error in JSCAD worker:",e);const r=e instanceof ErrorEvent?e.message:String(e);return self.postMessage({type:"error",error:"JSCAD worker error: ".concat(r)}),!0},self.onmessage=async e=>{const{type:r,results:o,configVersion:t}=e.data||{};if(i){const e={type:"error",error:"JSCAD library initialization failed: ".concat(i.message),configVersion:t};return void self.postMessage(e)}if(!c){const e={type:"error",error:"JSCAD convert function is unavailable.",configVersion:t};return void self.postMessage(e)}if("batch_jscad_to_stl"!==r){const e={type:"error",error:"Unknown message type: ".concat(r),configVersion:t};return void self.postMessage(e)}try{const e=o;if(!e||!e.cases)throw new Error("No results or cases provided to process.");const r=n({},e);r.cases=n({},e.cases);const i=Object.entries(r.cases);if(0===i.length)throw new Error("No JSCAD cases to process.");for(const[o,t]of i){const e=null===t||void 0===t?void 0:t.jscad;if(e&&""!==e.trim())try{var s;const t=c({source:e,format:"stla"}),i=null===t||void 0===t||null===(s=t.data)||void 0===s?void 0:s[0];let f=null;if("string"===typeof i)f=i;else if(i instanceof ArrayBuffer&&a)f=a.decode(new Uint8Array(i));else if(ArrayBuffer.isView(i)&&a){const e=i,r=new Uint8Array(e.buffer,e.byteOffset,e.byteLength);f=a.decode(r)}if(!f){console.warn("Generated STL content is empty or unsupported type for case: ".concat(o));continue}if(f=f.replace(/^solid csg\.js\b/,"solid ".concat(o)),!f||""===f.trim()){console.warn("Generated STL content is empty for case: ".concat(o));continue}r.cases[o]=n(n({},r.cases[o]),{},{stl:f})}catch(f){const e=f instanceof Error?f.message:String(f);console.error("Failed to convert case ".concat(o,": ").concat(e))}}const l={type:"success",results:r,configVersion:t};self.postMessage(l)}catch(u){const r=u instanceof Error?u.message:String(u),o={type:"error",error:"JSCAD to STL batch conversion failed: ".concat(r),configVersion:t};self.postMessage(o)}}})();
//# sourceMappingURL=919.9abc9b3c.chunk.js.map