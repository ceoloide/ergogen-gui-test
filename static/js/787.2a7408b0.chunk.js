(()=>{"use strict";console.log("<-> JSCAD worker module starting..."),self.onerror=e=>{console.error(">>> Uncaught error in JSCAD worker:",e);const t=e instanceof ErrorEvent?e.message:String(e);return self.postMessage({type:"error",error:"JSCAD worker error: ".concat(t)}),!0};const e={};self.document={getElementById:e=>({style:{},firstChild:{textContent:""},className:"",text:"",value:0,min:0,max:0,options:{length:0,remove:()=>{},add:()=>{}},appendChild:()=>{},setAttribute:()=>{}}),createElement:e=>({style:{},firstChild:{textContent:""},className:"",text:"",value:0,min:0,max:0,options:{length:0,remove:()=>{},add:()=>{}},appendChild:()=>{},setAttribute:()=>{}}),implementation:{},location:{href:""},addEventListener:(t,r)=>{(e[t]||(e[t]=[])).push(r)},dispatchEvent:t=>{const r="string"===typeof t?t:null===t||void 0===t?void 0:t.type;(e[r]||[]).forEach(e=>{try{e(t)}catch(r){}})}},self.window=self;let t=null,r=null;const o=(async()=>{try{var e,o;importScripts("/dependencies/openjscad.js"),await new Promise(e=>setTimeout(e,0)),null===(e=(o=self.document).dispatchEvent)||void 0===e||e.call(o,"DOMContentLoaded");const r=5;let n=0;for(;n<r;){const e=window.myjscad;if(!!e&&"function"===typeof e.setup&&"function"===typeof e.compile&&"function"===typeof e.generateOutput){t=e;break}n+=1,await new Promise(e=>setTimeout(e,10))}if(!t){const e=Object.keys(window.myjscad||{});throw console.error("JSCAD init: myjscad not ready after attempts; keys =",e),new Error("window.myjscad was not correctly populated by openjscad.js script.")}console.log("<-> OpenJSCAD library loaded and initialized in worker")}catch(n){r=n instanceof Error?n:new Error(String(n)),console.error(">>> Failed to load or initialize OpenJSCAD library:",r)}})();self.onmessage=async e=>{await o;const{type:n,jscad:s,requestId:i}=e.data||{};if(r){const e={type:"error",error:"JSCAD library initialization failed: ".concat(r),requestId:i};return void self.postMessage(e)}if(!t)throw new Error("JSCAD library is not loaded or initialized correctly.");if("jscad_to_stl"!==n){const e={type:"error",error:"Unknown message type: ".concat(n),requestId:i};return void self.postMessage(e)}try{if(!s||""===s.trim())throw new Error("JSCAD script is empty.");t.setup(),await t.compile(s);const e=t.generateOutput("stla",null).asBuffer().toString();if(!e||""===e.trim())throw new Error("Generated STL content is empty.");const r={type:"success",stl:e,requestId:i};self.postMessage(r)}catch(a){const e=a instanceof Error?a.message:String(a),t={type:"error",error:"JSCAD to STL conversion failed: ".concat(e),requestId:i};self.postMessage(t)}}})();
//# sourceMappingURL=787.2a7408b0.chunk.js.map